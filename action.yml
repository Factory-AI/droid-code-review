name: Factory Droid Review
description: Automated Code Review for GitHub Pull Requests.
author: Factory

inputs:
  factory-api-key:
    description: "The API key to run Droid Exec which powers the Review Droid (required)."
    required: true
  pr-number:
    description: "The Pull Request number being reviewed."
    required: true
  pr-head-sha:
    description: "The commit SHA of the Pull Request head branch for correct checkout."
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.pr-head-sha }}
        token: ${{ github.token }}

    - name: Install Droid CLI
      shell: bash
      run: |
        curl -fsSL https://app.factory.ai/cli | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        "$HOME/.local/bin/droid" --version

    - name: Check and fill PR description if needed
      shell: bash
      env:
        FACTORY_API_KEY: ${{ inputs.factory-api-key }}
        GH_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        echo "Checking PR description for @droid fill command..."
        
        # Fetch current PR description
        PR_BODY=$(gh pr view ${{ inputs.pr-number }} --repo ${{ github.repository }} --json body -q .body || echo "")
        
        if ! echo "$PR_BODY" | grep -q "@droid fill"; then
          echo "No '@droid fill' found in PR description. Skipping description generation."
          exit 0
        fi

        echo "Found '@droid fill' in PR description. Generating detailed description..."
        
        # Check for PR template in common locations
        PR_TEMPLATE=""
        for template_path in ".github/PULL_REQUEST_TEMPLATE.md" ".github/pull_request_template.md"; do
          if [ -f "$template_path" ]; then
            PR_TEMPLATE=$(cat "$template_path")
            echo "Found PR template at $template_path"
            break
          fi
        done
        
        # Create the entire prompt in a single heredoc with inline variables
        cat > pr_description_prompt.txt << EOF
        Generate a comprehensive pull request description for PR #${{ inputs.pr-number }}.

        First, use the Web Fetch tool to get the full PR context from:
        https://github.com/${{ github.repository }}/pull/${{ inputs.pr-number }}

        This will provide you with the PR title, diff, changed files, and commit messages.

        $(if [ -n "$PR_TEMPLATE" ]; then
          echo "YOUR TASK: Fill out the following PR template based on the code changes."
          echo ""
          echo "--- PR TEMPLATE TO FILL ---"
          echo "$PR_TEMPLATE"
          echo "--- END OF TEMPLATE ---"
          echo ""
          echo "TEMPLATE INSTRUCTIONS:"
          echo "- Fill sections you can verify from the code diff"
          echo "- For checklists: only check items verifiable from the code"
          echo "- For unverifiable sections: use '[To be filled by author]'"
        else
          echo "Generate a description with this structure:"
          echo ""
          echo "## Summary"
          echo "A clear 2-3 sentence overview of what this PR accomplishes."
          echo ""
          echo "## Changes"
          echo "- List the main changes made in this PR"
          echo "- Group related changes together"
          echo "- Reference specific files when relevant"
          echo ""
          echo "## Implementation Details"
          echo "Describe key technical decisions or patterns used (if non-obvious)."
          echo ""
          echo "## Testing"
          echo "- Note any test files added or modified (visible in the diff)"
          echo "- Remind that tests should be run locally"
          echo ""
          echo "## Breaking Changes"
          echo "Only include if there are actual breaking changes."
          echo ""
          echo "## Related Issues"
          echo "Link any issues mentioned in the PR or commits (e.g., Fixes #123)."
        fi)

        IMPORTANT RULES:
        1. Fill out the sections based *only* on the actual code diff.
        2. Do not make up information. If a section isn't relevant, state that.
        3. Be concise and factual.
        4. DO NOT include "@droid fill" in the final generated description.

        After generating the description, update the PR using:
        gh pr edit ${{ inputs.pr-number }} --repo ${{ github.repository }} --body "[YOUR GENERATED DESCRIPTION]"

        Make sure to properly escape the description for shell usage.
        EOF

        echo "Generating PR description..."
        droid exec --skip-permissions-unsafe -f pr_description_prompt.txt
        
        echo "PR description updated successfully."

    - name: Perform automated code review
      shell: bash
      env:
        FACTORY_API_KEY: ${{ inputs.factory-api-key }}
        GH_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        cat > prompt.txt << 'EOF'
        You are an automated code review system for PR #${{ inputs.pr-number }}.

        ## STEP 1: FETCH PR DATA
        Use Web Fetch: https://github.com/${{ github.repository }}/pull/${{ inputs.pr-number }}

        ## STEP 2: IDENTIFY ALL BUGS IN ONE PASS

        Scan the ENTIRE diff and identify ALL issues now - don't save any for future runs.
        
        **Focus on:**
        - Logic errors: unreachable code, missing break/return, off-by-one errors
        - Async issues: missing await, unhandled promises
        - Safety: null dereferences, resource leaks, injections
        - Type errors: wrong operators (===/==, &&/||), type coercion issues
        
        **Skip:** style, naming, architecture, performance, test coverage

        ## STEP 3: POSITION CALCULATION
        
        **Critical:** Count ALL lines in diff sequentially after @@ header, starting at 1:
        ```diff
        @@ -10,4 +10,5 @@
          const data = getData();      // Position 1
          const result = process(data); // Position 2 ← To fix this line, use position 2
        + console.log(result);         // Position 3
          return result;               // Position 4
        ```
        
        **Before submitting:** Verify the text at your calculated position matches the line to replace

        ## STEP 4: FORMAT COMMENTS

        Structure: Issue → Impact → (optional) Context.
        Do NOT include commit suggestions or use fenced suggestion blocks.
        No emojis or decorative formatting - be direct and professional.
        
        Example: "Missing await on async call. This returns a Promise instead of the data, causing undefined behavior downstream."

        ## STEP 5: SUBMIT REVIEW
        
        **⚠️ CRITICAL: Use ONLY inline comments on specific lines. NO summaries, general comments, or commit suggestions.**
        
        Submit inline comments via API:
        ```bash
        curl -X POST \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls/${{ inputs.pr-number }}/reviews \
          -d '{
            "event": "COMMENT",
            "comments": [{
              "path": "file.js",
              "line": 2,              // Diff position (NOT file line number)
              "side": "RIGHT",        // RIGHT for new code, LEFT for old
              "body": "Describe the issue and its impact. Provide guidance in prose only."
            }]
          }'
        ```

        Multi-line requires start_line:
        ```json
        {
          "path": "file.js",
          "start_line": 10,      // First line to replace
          "line": 13,            // Last line to replace
          "start_side": "RIGHT",
          "side": "RIGHT",
          "body": "Issue spans multiple lines. Explain the problem and recommend changes without suggestion blocks."
        }
        ```
        Note: Keep feedback in plain text; do not embed suggestion blocks or code fences.

        ## CONSTRAINTS
        
        **Comment Rules:**
        - ONLY inline comments attached to specific line numbers
        - NO general PR comments like "I've completed the review" or "Here's what I found"
        - NO commit suggestions or fenced suggestion blocks
        
        **Review Rules:**
        - NEVER repeat comments from previous review runs
        - Review ALL issues in a SINGLE run
        - Use event: "COMMENT" only (never APPROVE/REQUEST_CHANGES)
        - Only comment on modified lines in the diff
        - Only suggest fixes when 100% confident, expressed in prose rather than suggestion blocks
        EOF

        echo "Running code review analysis..."
        droid exec --skip-permissions-unsafe -f prompt.txt

    - name: Upload debug artifacts
      uses: actions/upload-artifact@v4
      with:
        name: droid-review-debug-${{ github.run_id }}
        path: |
          prompt.txt
          ~/.factory/logs/droid-log-single.log
          ~/.factory/logs/console.log
          ~/.factory/sessions/*
        if-no-files-found: ignore
        retention-days: 7
