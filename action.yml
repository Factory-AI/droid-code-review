name: Factory Droid Review
description: Automated Code Review for GitHub Pull Requests.
author: Factory

inputs:
  factory-api-key:
    description: "The API key to run Droid Exec which powers the Review Droid (required)."
    required: true
  pr-number:
    description: "The Pull Request number being reviewed."
    required: true
  pr-head-sha:
    description: "The commit SHA of the Pull Request head branch for correct checkout."
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.pr-head-sha }}
        token: ${{ github.token }}

    - name: Install Droid CLI
      shell: bash
      run: |
        curl -fsSL https://app.factory.ai/cli | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        "$HOME/.local/bin/droid" --version

    - name: Check and fill PR description if needed
      shell: bash
      env:
        FACTORY_API_KEY: ${{ inputs.factory-api-key }}
        GH_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        echo "Checking PR description for @droid fill command..."

        # Fetch current PR description and save original
        PR_BODY=$(gh pr view ${{ inputs.pr-number }} --repo ${{ github.repository }} --json body -q .body || echo "")

        # Check if PR description contains "@droid fill"
        if echo "$PR_BODY" | grep -q "@droid fill"; then
          echo "Found '@droid fill' in PR description. Generating detailed description..."
          
          # Extract additional instructions if provided after @droid fill
          ADDITIONAL_INSTRUCTIONS=$(echo "$PR_BODY" | sed -n 's/.*@droid fill\s*\(.*\)/\1/p' | head -1)
          
          # Check for PR template
          PR_TEMPLATE=""
          if [ -f ".github/pull_request_template.md" ]; then
            PR_TEMPLATE=$(cat .github/pull_request_template.md)
            echo "Found PR template"
          elif [ -f ".github/PULL_REQUEST_TEMPLATE.md" ]; then
            PR_TEMPLATE=$(cat .github/PULL_REQUEST_TEMPLATE.md)
            echo "Found PR template"
          elif [ -f "docs/pull_request_template.md" ]; then
            PR_TEMPLATE=$(cat docs/pull_request_template.md)
            echo "Found PR template"
          elif [ -f "PULL_REQUEST_TEMPLATE.md" ]; then
            PR_TEMPLATE=$(cat PULL_REQUEST_TEMPLATE.md)
            echo "Found PR template"
          else
            echo "No PR template found"
          fi
          
          cat > pr_description_prompt.txt << 'EOF'
        You are an intelligent AI system helping to generate comprehensive pull request descriptions.

        REPOSITORY: ${{ github.repository }}
        PR_NUMBER: #${{ inputs.pr-number }}

        YOUR TASK:
        Generate an excellent pull request description by analyzing the code changes and following a structured approach.

        STEP 1: Data Collection
        First, use the Web Fetch tool to get the full PR context from: https://github.com/${{ github.repository }}/pull/${{ inputs.pr-number }}

        This will provide you with:
        - Current PR title and metadata
        - Complete diff showing all changes (lines starting with + or -)
        - List of changed files
        - Commit messages
        - Any linked issues or tickets

        STEP 2: Analysis Phase
        After fetching the data, analyze the changes:

        A. SUMMARY GENERATION
        - Focus ONLY on actual code changes (+ and - lines)
        - Group related changes together logically
        - Estimate complexity:
          * Low: Simple changes, < 150 lines, single purpose
          * Medium: Multiple files/functions, 150-500 lines
          * High: Major refactoring, > 500 lines, architectural changes
        - Identify the primary purpose and impact

        B. CHANGE CATEGORIZATION
        - Bug fixes vs features vs refactoring
        - Breaking changes identification
        - Dependencies added/updated/removed
        - Test additions or modifications

        STEP 3: PR Description Generation

        EOF

          # Add PR template section if exists
          if [ -n "$PR_TEMPLATE" ]; then
            cat >> pr_description_prompt.txt << 'EOF'
        PR_TEMPLATE (You MUST follow this structure):
        ```
        EOF
            echo "$PR_TEMPLATE" >> pr_description_prompt.txt
            cat >> pr_description_prompt.txt << 'EOF'
        ```

        Generate the description following the EXACT structure of the PR_TEMPLATE above.
        - Fill in sections you can verify from the code changes
        - For checklists, ONLY check items you can verify from the diff
        - For unverifiable sections, add "[PR author to fill]" placeholder

        EOF
          else
            cat >> pr_description_prompt.txt << 'EOF'
        No PR template found. Use this standard structure:

        ## Summary
        [2-3 sentences describing what this PR accomplishes. Focus on the "what" and "why", not implementation details]

        ## What Changed
        [Bullet points of specific changes, grouped by category]
        - **Feature/Component**: Description of changes with affected files
        - **Tests**: Test additions/modifications if present in diff
        - **Dependencies**: Package updates if applicable
        - **Configuration**: Config changes if applicable

        ## Implementation Details
        [Key technical decisions and patterns used. Focus on non-obvious choices and the reasoning behind them]

        ## Testing
        [Only mention tests that are visible in the diff]
        - Added/modified test files: [list files if present]
        - Test coverage areas: [based on visible test changes]
        - Note: PR author should run tests and report results

        ## Breaking Changes
        [Only include if there are actual breaking changes visible in the code]

        ## Related Issues
        [Link any issues/tickets mentioned in the PR or commits]
        Fixes #[issue-number] (if applicable)

        ## Additional Notes
        [Any TODOs, follow-up work, or important context for reviewers]

        EOF
          fi

          # Add additional instructions if provided
          if [ -n "$ADDITIONAL_INSTRUCTIONS" ]; then
            cat >> pr_description_prompt.txt << EOF

        ADDITIONAL INSTRUCTIONS FROM USER:
        $ADDITIONAL_INSTRUCTIONS

        EOF
          fi

          cat >> pr_description_prompt.txt << 'EOF'
        CRITICAL RULES:
        1. **NO ASSUMPTIONS**: Do not claim anything you cannot verify from the code diff
           - ‚ùå "All tests pass"
           - ‚ùå "Performance is improved"
           - ‚ùå "Follows best practices"
           - ‚úÖ "Added error handling to fetchUser function"
           - ‚úÖ "Refactored database queries to use prepared statements"

        2. **FACTUAL ONLY**: Every statement must be directly supported by the code changes
           - Reference specific files and functions
           - Quote actual code changes when relevant
           - Use line numbers or file paths for clarity

        3. **PRESERVE INFORMATION**:
           - Keep ALL URLs from the original PR body
           - Include all issue/ticket references with proper linking syntax
           - Use GitHub magic words for auto-linking: Fixes, Closes, Resolves

        4. **CLARITY AND CONCISENESS**:
           - Be entity-dense: each sentence should add new information
           - Use active voice ("This PR adds..." not "Added by this PR...")
           - Avoid redundancy between sections
           - Technical but accessible language

        5. **TICKETS AND ISSUES**:
           - If the original body mentions tickets (JIRA, Linear, etc.), include them
           - Format: "Fixes ABC-123" or "Closes #456"
           - Place these in the Related Issues section or after the summary

        6. **UNVERIFIABLE ITEMS**:
           - For checklist items you cannot verify: leave unchecked
           - For required information you don't have: use "[PR author to fill]"
           - Common unverifiable items: test results, performance metrics, deployment status

        FINAL STEP: Update the PR

        After generating the description, update it using this EXACT format:

        ```bash
        # Create a temporary file with the new description
        cat > new_pr_body.md << 'DESCRIPTION_END'
        [YOUR GENERATED DESCRIPTION HERE]
        DESCRIPTION_END

        # Update the PR
        gh pr edit ${{ inputs.pr-number }} --repo ${{ github.repository }} --body-file new_pr_body.md
        ```

        IMPORTANT: 
        - The new description should COMPLETELY REPLACE the old one
        - Do NOT include "@droid fill" in the new description
        - Ensure proper markdown formatting and escaping

        SOURCE ATTRIBUTION:
        At the very end of your generated description, add this footer:

        ---
        <details>
        <summary>üìù <sub>PR description generated by Factory Droid</sub></summary>
        <sub>

        - Generated from PR #${{ inputs.pr-number }} diff analysis
        - Original body: "@droid fill${{ ADDITIONAL_INSTRUCTIONS:+ }}$ADDITIONAL_INSTRUCTIONS"
        - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        </sub>
        </details>

        Now proceed to:
        1. Fetch the PR data
        2. Analyze the changes
        3. Generate the comprehensive description
        4. Update the PR with the new description

        EOF

          echo "Generating PR description..."
          droid exec --skip-permissions-unsafe -f pr_description_prompt.txt
          
          echo "PR description updated successfully."
        else
          echo "No '@droid fill' found in PR description. Skipping description generation."
        fi

    - name: Perform automated code review
      shell: bash
      env:
        FACTORY_API_KEY: ${{ inputs.factory-api-key }}
        GH_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        cat > prompt.txt << 'EOF'
        You are an automated code review system. Review the PR diff and identify clear issues that need to be fixed.

        First, use the Web Fetch tool to get the full PR context from: https://github.com/${{ github.repository }}/pull/${{ inputs.pr-number }}

        This will provide you with:
        - PR title, description, and metadata
        - Complete diff with line numbers for positioning comments
        - Changed files with their status
        - Existing comments and review threads (to avoid duplicates)

        Task: After fetching the PR data, review the code changes and directly submit your findings using the GitHub CLI.

        Focus on these types of issues:
        - Dead/unreachable code (if (false), while (false), code after return/throw/break)
        - Broken control flow (missing break in switch, fallthrough bugs)
        - Async/await mistakes (missing await, .then without return, unhandled promise rejections)
        - Array/object mutations in React components or reducers
        - UseEffect dependency array problems (missing deps, incorrect deps)
        - Incorrect operator usage (== vs ===, && vs ||, = in conditions)
        - Off-by-one errors in loops or array indexing
        - Integer overflow/underflow in calculations
        - Regex catastrophic backtracking vulnerabilities
        - Missing base cases in recursive functions
        - Incorrect type coercion that changes behavior
        - Environment variable access without defaults or validation
        - Null/undefined dereferences
        - Resource leaks (unclosed files or connections)
        - SQL/XSS injection vulnerabilities
        - Concurrency/race conditions
        - Missing error handling for critical operations

        Comment format for inline reviews:
        - Describe the issue clearly: "This async function is missing await"
        - Explain the impact: "Without await, the promise won't resolve before continuing"
        - ONLY provide commit suggestions when you are confident about the exact fix
        - When uncertain, just identify the problem without suggesting code changes
        - Example WITHOUT suggestion (when fix needs context):
          "Potential null dereference here. Consider adding a null check, but the exact approach depends on the business logic."

        CRITICAL: GitHub suggestion format requirements:
        - Single-line suggestions: Use simple ```suggestion block
        - Multi-line suggestions: MUST include the complete replacement code
        - The suggestion block replaces EVERYTHING from the start_line to end_line in the comment
        - Never split multi-line suggestions - include ALL lines that need to be replaced

        - Example single-line suggestion (when fix is certain):
          ```suggestion
          const result = await fetchData();
          ```

        - Example multi-line suggestion (replaces entire block from start to end):
          ```suggestion
          if (value != null) {
            return processValue(value);
          }
          return defaultValue;
          ```

        - Be specific and actionable, no emojis or decorative formatting

        Skip commenting on:
        - Code style, formatting, or naming conventions
        - Minor performance optimizations
        - Architectural decisions or design patterns
        - Features or functionality (unless broken)
        - Test coverage (unless tests are clearly broken)

        You may open and read other repository files beyond those listed above when it helps you understand the change, but keep all review comments anchored to the modified lines in this PR.

        Use the fetched PR data to:
        - NEVER repeat any comments you've made in previous review runs, regardless of resolution status
        - Check existing comments thoroughly to avoid ALL duplicates - if you've commented on an issue before, skip it
        - Only comment on NEW issues that haven't been identified in any previous review run

        Position calculation:
        - Use the line position from the diff data fetched from the PR
        - This is the line number in the diff, not the absolute file line
        - Comments must align with exact changed lines only

        How to submit your review:

        IMPORTANT REQUIREMENTS:
        - DO NOT request changes or approve the PR as this blocks the merge workflow
        - DO NOT use review statuses that affect the PR's mergeable state
        - PRIORITIZE inline comments on specific lines (suggestions are optional)
        - USE curl with the GitHub REST API to submit reviews with inline comments

        To submit a review with inline comments:
        1. Create a JSON payload with your review data (event: "COMMENT", comments array with paths and positions)
        2. Use curl to POST to: https://api.github.com/repos/${{ github.repository }}/pulls/${{ inputs.pr-number }}/reviews
        3. Include the GitHub token in the Authorization header: "Bearer $GH_TOKEN"
        4. When confident about fixes, include markdown ```suggestion blocks (but these are OPTIONAL)
        5. Use line positions from the PR diff (not absolute file line numbers)
        6. For multi-line comments: set start_line and line (end line) to define the range

        Example single-line suggestion format in comment body:
        ```
        Missing await on async call. This will cause the promise to not resolve properly.
        \`\`\`suggestion
        const data = await fetchUserData(userId);
        \`\`\`
        ```

        Example multi-line suggestion format (CRITICAL - include ALL replacement lines):
        ```json
        {
          "path": "path/to/file.js",
          "start_line": 10,        // Line number in the diff where comment starts (for multi-line comments)
          "line": 13,              // Line number in the diff where comment ends (required for all comments)
          "start_side": "RIGHT",  // Side of diff where comment starts (LEFT=old code, RIGHT=new code)
          "side": "RIGHT",         // Side of diff where comment ends (usually same as start_side)
          "body": "Missing null check will cause runtime error.\n\`\`\`suggestion\nif (value != null) {\n  return processValue(value);\n}\nreturn defaultValue;\n\`\`\`"
        }
        ```

        IMPORTANT for multi-line suggestions:
        - The suggestion block must contain the COMPLETE replacement for lines start_line through line
        - GitHub will replace ALL lines in that range with your suggestion content
        - If you only include the last line, GitHub will still replace the entire range, breaking the code

        For simple status updates without inline comments:
        - You may use 'gh pr comment' to post a general comment
        - Example: "Code review complete. No issues found." or "Found X issues requiring attention."

        Review guidelines:
        - Focus on inline comments identifying specific issues
        - Submit at most 10 inline comments, prioritizing the most critical issues
        - Include commit suggestions ONLY when you're confident about the exact fix
        - When uncertain about the fix, describe the problem without a code suggestion
        - Check for existing comments to avoid duplicates
        - Group related inline comments in a single review submission when efficient
        EOF

        echo "Running code review analysis..."
        droid exec --skip-permissions-unsafe -f prompt.txt

    - name: Upload debug artifacts
      uses: actions/upload-artifact@v4
      with:
        name: droid-review-debug-${{ github.run_id }}
        path: |
          prompt.txt
          ${{ runner.home }}/.factory/logs/droid-log-single.log
          ${{ runner.home }}/.factory/logs/console.log
          ${{ runner.home }}/.factory/sessions/*
        if-no-files-found: ignore
        retention-days: 7
